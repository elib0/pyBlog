@import 'nib/gradients'
@import 'nib/vendor'
@import 'jeet/settings'

bs()
    box-sizing(border-box)
    *behavior url(js/vendor/boxsizing.htc)
*
    bs()
html
    overflow-y scroll
    overflow-x hidden
.placeholder
    color #aaa
img, video, audio, embed, object, input, iframe
    max-width 100%
last()
    margin-right 0
gridsystem_width = (column_width + gutter_width) * columns
total_width = 100%
min_width = max_width
correction = (((0.5 / min_width) * 100) * 1%)
cf()
    *zoom 1
    &:before, &:after
        content ""
        display table
    &:after
        clear both
body
    cf()
    width 100%
col(x, center = f, last = l)
    cf()
    display inline
    float left
    width total_width * ((((gutter_width + column_width ) * x) - gutter_width) / (gridsystem_width - gutter_width))
    margin-right (total_width * ( (gutter_width * 0.5) / (gridsystem_width - gutter_width))) * 2
    *width total_width * ((((gutter_width + column_width ) * x) - gutter_width) / gridsystem_width) - (correction * 2)
    *margin-right (total_width * ( (gutter_width * 0.5) / gridsystem_width)-correction) * 2
    &:last-child
        last()
    if (center == c)
        float none
        display block
        margin-right auto !important
        margin-left auto !important
        *margin-right auto !important
        *margin-left auto !important
    if (last == f)
        &:last-child
            margin-right (total_width * ( (gutter_width * 0.5) / (gridsystem_width - gutter_width))) * 2
            *margin-right (total_width * ( (gutter_width * 0.5) / gridsystem_width)-correction) * 2
unit = (total_width * ( (gutter_width * 0.5) / (gridsystem_width - gutter_width))) * 2
span(x, center = f)
    cf()
    display inline
    float left
    width total_width * ((((gutter_width + column_width ) * x)) / gridsystem_width)
    *width total_width * ((((gutter_width + column_width ) * x)) / gridsystem_width)-correction
    *behavior url(js/vendor/boxsizing.htc)
    if (center == c)
        float none
        display block
        margin-right auto !important
        margin-left auto !important
        *margin-right auto !important
        *margin-left auto !important
offset(offset = 1)
    margin-left ((total_width * ( (gutter_width * 0.5) / (gridsystem_width - gutter_width))) * 4) * offset
center(mw = max_width, p = max_width_padding)
    cf()
    max-width mw
    margin-left auto
    margin-right auto
    padding-left p
    padding-right p
stack(align = c)
    display block
    width 100%
    margin-left auto
    margin-right auto
    margin-bottom 2%
    if (align == c)
        text-align center
    if (align == l)
        text-align left
    if (align == r)
        text-align right
bp(w = 705px, mobile_first = false)
    if (mobile_first == mf)
        unquote("@media all and (min-width: " + w + ") {")
    else
        unquote("@media all and (max-width: " + w + ") {")
endbp()
    unquote("}")
w(numerator = 1, denominator = 1, span = f, center = f last = l)
    x = (numerator / denominator) * columns
    cf()
    display inline
    float left
    width total_width * ((((gutter_width + column_width ) * x) - gutter_width) / (gridsystem_width - gutter_width))
    margin-right (total_width * ( (gutter_width * 0.5) / (gridsystem_width - gutter_width))) * 2
    *width total_width * ((((gutter_width + column_width ) * x) - gutter_width) / gridsystem_width) - (correction * 2)
    *margin-right (total_width * ( (gutter_width * 0.5) / gridsystem_width)-correction) * 2
    &:last-child
        last()
    if (span == s)
        width total_width * ((((gutter_width + column_width ) * x)) / gridsystem_width)
        *width total_width * ((((gutter_width + column_width ) * x)) / gridsystem_width)-correction
        *behavior url(js/vendor/boxsizing.htc)
        margin-right 0 
    if (center == c)
        float none !important
        display block !important
        margin-right auto !important
        margin-left auto !important
        *margin-right auto !important
        *margin-left auto !important
    if (last == f)
        &:last-child
            margin-right (total_width * ( (gutter_width * 0.5) / (gridsystem_width - gutter_width))) * 2
            *margin-right (total_width * ( (gutter_width * 0.5) / gridsystem_width)-correction) * 2
.full
    w()
.half
    w(1, 2)
.third
    w(1, 3)
.fourth
    w(1, 4)
.fifth
    w(1, 5)
.sixth
    w(1, 6)
.seventh
    w(1, 7)
.eigth
    w(1, 8)
.ninth
    w(1, 9)
.tenth
    w(1, 10)
.eleventh
    w(1, 11)
.twelfth
    w(1, 12)